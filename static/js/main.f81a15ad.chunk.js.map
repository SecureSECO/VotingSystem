{"version":3,"sources":["bg2.jpg","logo.svg","mylogo.jpg","uulogo.png","components/Navbar.js","components/Home.js","components/Main2.js","components/List.js","components/SearchEntity.js","components/Search.js","components/Main.js","components/Add.js","components/Main3.js","components/SearchEntities.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","href","this","props","account","Component","App","state","dataCount","datas","loading","createData","bind","window","web3","ethereum","loadWeb3","loadBlockchainData","Web3","enable","currentProvider","eth","getAccounts","accounts","myaccount","setState","net","getId","networkId","networkData","AddData","networks","adddata","Contract","abi","address","methods","call","i","data","alert","jsonvalue","identity","send","from","once","receipt","src","bg1","alt","mylogo","width","height","uulogo","Main2","TrustScore","parsejson","IsValidJSONString","JSON","parse","text","item","stringify","e","parsejsonTrustScore","scope","map","key","toString","packagename","version","trustscore","class","role","SearchEntity","txtSearch","title","value","document","getElementById","innerHTML","placeholder","ref","input","onClick","search","Search","Main","Validataion","checking","btnStatus","requestMetamask","items","componentname","description","name","price","onSubmit","event","preventDefault","serialize","required","searching","path","component","Home","exact","List","Add","SearchEntities","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f81a15ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg2.856ac9d0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/mylogo.b0d6fa00.jpg\";","module.exports = __webpack_public_path__ + \"static/media/uulogo.0f04b257.png\";","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './App.css';\n\nclass Navbar extends Component {\n\n   \n\n  render() {\n    return (\n        <nav className=\"navbar navbar-expand-lg fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n  <span className=\"navbar-brand col-sm-3 col-md-2 mr-0\">       \n          <span className=\"title1\">TrusSECO</span>\n        </span>\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span className=\"navbar-toggler-icon\"></span>\n  </button>\n  <div className=\"collapse navbar-collapse\" id=\"navbarText\">\n    <ul className=\"navbar-nav mr-auto marginleft\">\n      <li className=\"nav-item active\">        \n        <Link to=\"/Votingsystem\" className=\"nav-link\">Home<span className=\"sr-only\">(current)</span></Link>\n      </li>\n      <li className=\"nav-item\">        \n         <Link to=\"/Add\" className=\"nav-link\">Voting(decentralized)</Link>\n      </li>\n      \n       <li className=\"nav-item\">        \n         <Link to=\"/List\" className=\"nav-link\">All Voting(decentralized)</Link>\n      </li>\n       <li className=\"nav-item\">        \n         <a href=\"http://localhost:3000/\" className=\"nav-link\">Vote(centralized)</a>\n      </li>\n      <li className=\"nav-item\">        \n         <a href=\"http://localhost:3000/index\" className=\"nav-link\">All Votes(centralized)</a>\n      </li>\n\n          </ul>\n    <span className=\"navbar-text\">\n       <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-white\"><span className=\"bold\">{this.props.account == ''? <span>You need to install MataMask</span>: <span>Public Key</span> }</span> <span id=\"account\">{this.props.account}</span></small>\n          </li>          \n        </ul>\n    </span>\n  </div>\n</nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport Web3 from 'web3'\n\nimport './App.css';\nimport AddData from '../abis/AddData.json'\nimport Navbar from './Navbar'\n\nimport bg1 from '../bg2.jpg';\nimport mylogo from '../mylogo.jpg';\nimport uulogo from '../uulogo.png';\nimport { Link } from 'react-router-dom';\n\nclass App extends Component {\n\n  async componentWillMount() {\n   if (window.web3 || window.ethereum) {\n       await this.loadWeb3()\n       await this.loadBlockchainData()\n    }\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n     // window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    const myaccount=accounts[0]\n    this.setState({ account:  myaccount })\n    const networkId = await web3.eth.net.getId()\n    const networkData = AddData.networks[networkId]\n    if(networkData) {\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\n      this.setState({ adddata })\n      const dataCount = await adddata.methods.dataCount().call()\n      this.setState({ dataCount })\n      // Load datas\n      for (var i = 1; i <= dataCount; i++) {\n        const data = await adddata.methods.datas(i).call()\n        this.setState({\n          datas: [...this.state.datas, data]\n        })\n      }\n      this.setState({ loading: false})\n    } else {\n      window.alert('The contract not deployed to detected network.')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      dataCount: 0,\n      datas: [],\n      loading: true\n     \n    }\n\n    this.createData = this.createData.bind(this)\n\n     \n  }\n\n  createData(jsonvalue, identity) {\n    this.setState({ loading: true })\n    this.state.adddata.methods.createData(jsonvalue, identity).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account}/>\n         <img src={bg1} alt=\"\" className=\"bg\"/>\n           <div className=\"form\">\n           <p className=\"font\">Package managers are part of the infrastructure that enables anyone to use software. Package managers are a software ecosystem’s backbone. They host software from respected software producers and are seen as trusted sources of software by their users. Unfortunately, these package managers are not as secure as users think they are. At different points in the life cycle of software, vulnerabilities can enter the software and the package manager cannot be held responsible for it.  </p>\n            <p className=\"font\">\n            In this project, we want to use a distributed ledger that stores trust data about software packages to support the trust that customers of the package managers have. Such trust data can be whether the package contains known vulnerabilities, whether the package stems from a reproducible build, whether the package is maintained frequently, whether its developers are reputable, etc. The data is in turn used by package managers to provide trust data about their software packages. While TrustSECO is ecosystem agnostic, we intend to take the NixPkgs package manager as the initial use case.\n            </p>\n     \n            </div>\n           <div className=\"footer\">\n      <img src={mylogo} alt=\"\" width=\"200\" height=\"61\"/>\n      <img src={uulogo} alt=\"\" width=\"200\" height=\"104\"/>\n     </div>\n          </div>\n     );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\n\nimport Web3 from 'web3';\nimport AddData from '../abis/AddData.json';\nimport mylogo from '../mylogo.jpg';\nimport uulogo from '../uulogo.png';\n\nclass Main2 extends Component {\n\n\n  async componentWillMount() {\n    if (window.web3 || window.ethereum) {\n       await this.loadWeb3()\n       await this.loadBlockchainData()\n       await this.parsejson()\n    }\n  }\n\n\n  async parsejson(){\n\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    const myaccount=accounts[0]\n    this.setState({ account:  myaccount })\n    const networkId = await web3.eth.net.getId()\n    const networkData = AddData.networks[networkId]\n    if(networkData) {\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\n      this.setState({ adddata })\n      const dataCount = await adddata.methods.dataCount().call()\n      this.setState({ dataCount })\n      //Load datas\n      this.setState({datas: []});\n      for (var i = 1; i <= dataCount; i++) {\n        const data = await adddata.methods.datas(i).call()\n\n        if(this.IsValidJSONString(data.jsonvalue)){\n\n          var obj = JSON.parse(data.jsonvalue);\n          //alert( JSON.parse(data.jsonvalue).TrustScore); \n\n        }\n\n\n       \n  }\n}\n\n}\n\nparsejsonTrustScore(text){\n  if(this.IsValidJSONString(text)){\n\n          var obj = JSON.parse(text).TrustScore;\n          //alert( JSON.parse(data.jsonvalue).TrustScore); \n          return obj\n\n        }\n        return null\n\n}\n\n  IsValidJSONString(item) {\n     item = typeof item !== \"string\"\n        ? JSON.stringify(item)\n        : item;\n\n    try {\n        item = JSON.parse(item);\n    } catch (e) {\n        return false;\n    }\n\n    if (typeof item === \"object\" && item !== null) {\n        return true;\n    }\n\n    return false;\n}\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      //window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n      \n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    const myaccount=accounts[0]\n    this.setState({ account:  myaccount })\n    const networkId = await web3.eth.net.getId()\n    const networkData = AddData.networks[networkId]\n    if(networkData) {\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\n      this.setState({ adddata })\n      const dataCount = await adddata.methods.dataCount().call()\n      this.setState({ dataCount })\n      // Load datas\n      for (var i = 1; i <= dataCount; i++) {\n        const data = await adddata.methods.datas(i).call()\n        const TrustScore=this.parsejsonTrustScore(data.jsonvalue)\n        //alert(TrustScore)\n        this.setState({\n          datas: [...this.state.datas, data]\n        })\n      }\n      this.setState({ loading: false})\n    } else {\n      window.alert('The contract not deployed to detected network.')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      dataCount: 0,\n      datas: [],\n      TrustScore:0,\n      loading: true\n    }\n\n\n\n\n   \n   \n  }\n\n\n  render() {\n       return (\n      <div id=\"content\">\n              <p>&nbsp;</p>\n        <h5 className=\"center\">Votes</h5>\n        <div className=\"list\">\n        <table className=\"table table-bordered\" id=\"tbllist\">\n          <thead>\n            <tr>\n              <th scope=\"col\">#</th>\n              \n              <th scope=\"col\">Package Name</th>\n              \n               <th scope=\"col\">Version</th>\n\n               <th scope=\"col\">Trust Score</th>\n            \n\n                  </tr>\n          </thead>\n          <tbody id=\"productList\">\n            { this.props.datas.map((data, key) => {\n              return(\n                <tr key={key}>\n                  <th scope=\"row\">{data.id.toString()}</th>\n                   \n                  <td>{data.packagename}</td>\n                  \n                  <td>{data.version}</td>\n                 <td>{data.trustscore.toString()}</td>\n                  </tr>\n              )\n            })}\n          </tbody>\n        </table>\n        </div>\n       <div class=\"footer\">\n      <img src={mylogo} alt=\"\" width=\"200\" height=\"61\"/>\n      <img src={uulogo} alt=\"\" width=\"200\" height=\"104\"/>\n     </div>\n      </div>\n       );\n  }\n}\n\n\nexport default Main2;\n","import React, { Component } from 'react';\r\nimport Web3 from 'web3'\r\n\r\nimport './App.css';\r\nimport AddData from '../abis/AddData.json';\r\nimport Navbar from './Navbar';\r\nimport Main from './Main2';\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    if (window.web3 || window.ethereum) {\r\n       await this.loadWeb3()\r\n       await this.loadBlockchainData()\r\n    }\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      //window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    const myaccount=accounts[0]\r\n    this.setState({ account:  myaccount })\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = AddData.networks[networkId]\r\n    if(networkData) {\r\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\r\n      this.setState({ adddata })\r\n      const dataCount = await adddata.methods.dataCount().call()\r\n      this.setState({ dataCount })\r\n      // Load datas\r\n      for (var i = 1; i <= dataCount; i++) {\r\n        const data = await adddata.methods.datas(i).call()\r\n        this.setState({\r\n          datas: [...this.state.datas, data]\r\n        })\r\n      }\r\n      this.setState({ loading: false})\r\n    } else {\r\n      window.alert('The contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      dataCount: 0,\r\n      datas: [],\r\n      loading: true\r\n    }\r\n\r\n    this.createData = this.createData.bind(this)\r\n   \r\n  }\r\n\r\n  createData(jsonvalue, identity) {\r\n    this.setState({ loading: true })\r\n    this.state.adddata.methods.createData(jsonvalue, identity).send({ from: this.state.account })\r\n    .once('receipt', (receipt) => {\r\n      this.setState({ loading: false })\r\n    })\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account} />\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex\">\r\n              { this.state.loading\r\n                ? <div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\r\n                : <Main\r\n                  datas={this.state.datas}\r\n                  />\r\n              }\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\n\nimport Web3 from 'web3';\nimport AddData from '../abis/AddData.json';\nimport mylogo from '../mylogo.jpg';\nimport uulogo from '../uulogo.png';\n\nclass SearchEntity extends Component {\n\n\n  async componentWillMount() {\n    if (window.web3 || window.ethereum) {\n       await this.loadWeb3()\n       await this.loadBlockchainData()\n    }\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      //window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n      \n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    const myaccount=accounts[0]\n    this.setState({ account:  myaccount })\n    const networkId = await web3.eth.net.getId()\n    const networkData = AddData.networks[networkId]\n    if(networkData) {\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\n      this.setState({ adddata })\n      const dataCount = await adddata.methods.dataCount().call()\n      this.setState({ dataCount })\n      // Load datas\n      for (var i = 1; i <= dataCount; i++) {\n        const data = await adddata.methods.datas(i).call()\n        this.setState({\n          datas: [...this.state.datas, data]\n        })\n      }\n      this.setState({ loading: false})\n    } else {\n      window.alert('The contract not deployed to detected network.')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      dataCount: 0,\n      datas: [],\n      loading: true\n    }\n\n   \n   \n  }\n\n\n\n  search(txtSearch)\n{  \n   var title = this.title.value;\n    var a=this.props.datas.map((data, key) => {\n    if (title===data.identity.toString()) {\n           document.getElementById(\"txtResult\").innerHTML= data.jsonvalue;\n                 }                     \n            })\n }\n\n\n  render() {\n        return (\n        <div id=\"content\">\n      <div className=\"form searchBox\">      \n      <input type=\"text\" placeholder=\"Search identity.... \" className=\"form-control\" id=\"txtSearch\" ref={input => this.title = input}/>\n       <button className=\"btn btn-info form btnSearch\" onClick={()=>this.search(this.props.datas)}>\n      Search\n    </button>\n      <p>json file:</p>\n     <p id=\"txtResult\" className=\"resualt\">No Data...</p>\n     </div>\n     <div class=\"footer fixed\">\n      <img src={mylogo} alt=\"\" width=\"200\" height=\"61\"/>\n      <img src={uulogo} alt=\"\" width=\"200\" height=\"104\"/>\n     </div>\n            </div>\n        );\n  }\n}\n\n\nexport default SearchEntity;\n","import React, { Component } from 'react';\r\nimport Web3 from 'web3'\r\n\r\nimport './App.css';\r\nimport AddData from '../abis/AddData.json';\r\nimport Navbar from './Navbar';\r\nimport Main from './SearchEntity';\r\n\r\nclass Search extends Component {\r\n\r\n  async componentWillMount() {\r\n    if (window.web3 || window.ethereum) {\r\n       await this.loadWeb3()\r\n       await this.loadBlockchainData()\r\n    }\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      //window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n      \r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    const myaccount=accounts[0]\r\n    this.setState({ account:  myaccount })\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = AddData.networks[networkId]\r\n    if(networkData) {\r\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\r\n      this.setState({ adddata })\r\n      const dataCount = await adddata.methods.dataCount().call()\r\n      this.setState({ dataCount })\r\n      // Load datas\r\n      for (var i = 1; i <= dataCount; i++) {\r\n        const data = await adddata.methods.datas(i).call()\r\n        this.setState({\r\n          datas: [...this.state.datas, data]\r\n        })\r\n      }\r\n      this.setState({ loading: false})\r\n    } else {\r\n      window.alert('The contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      dataCount: 0,\r\n      datas: [],\r\n      loading: true\r\n    }\r\n\r\n    this.createData = this.createData.bind(this)\r\n   \r\n  }\r\n\r\n  createData(jsonvalue, identity) {\r\n    this.setState({ loading: true })\r\n    this.state.adddata.methods.createData(jsonvalue, identity).send({ from: this.state.account })\r\n    .once('receipt', (receipt) => {\r\n      this.setState({ loading: false })\r\n    })\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account} />\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex\">\r\n              { this.state.loading\r\n                ? <div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\r\n                : <Main\r\n                  datas={this.state.datas}\r\n                    />\r\n              }\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from 'react';\nimport Web3 from 'web3'\nimport AddData from '../abis/AddData.json';\nimport $ from 'jquery';\nimport axios from 'axios';\nimport './App.css';\n\n\nclass Main extends Component {\n\n  async componentWillMount() {\n    if (window.web3 || window.ethereum) {\n       await this.loadWeb3()\n       await this.loadBlockchainData()\n\n     \n\n    }\n  }\n\n\n\n\n\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      //window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n      \n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    const myaccount=accounts[0]\n    this.setState({ account:  myaccount })\n    const networkId = await web3.eth.net.getId()\n    const networkData = AddData.networks[networkId]\n    if(networkData) {\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\n      this.setState({ adddata })\n      const dataCount = await adddata.methods.dataCount().call()\n      this.setState({ dataCount })\n      // Load datas\n      // for (var i = 1; i <= dataCount; i++) {\n      //   const data = await adddata.methods.datas(i).call()\n      //   this.setState({\n      //     datas: [...this.state.datas, data]\n      //   })\n      // }\n      // this.setState({ loading: false})\n    } else {\n      window.alert('The contract not deployed to detected network.')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      dataCount: 0,\n      datas: [],\n      loading: true,\n      Validataion:true,\n      checking:false,\n      btnStatus:true,\n      requestMetamask:false,\n      items: []\n    }\n\n    this.createData = this.createData.bind(this)\n   \n  }\n\n  // createData(jsonvalue, identity) {\n\n  //   var jsonvalue = this.jsonvalue.value;\n  //   var resualt=this.IsValidJSONString(jsonvalue)\n  //   //alert(resualt)\n\n  //   if(this.state.Validataion == true && resualt==true && this.state.requestMetamask == false){\n\n  //      this.setState({ loading: true })\n  //   this.state.adddata.methods.createData(jsonvalue, identity).send({ from: this.state.account })\n  //   .once('receipt', (receipt) => {\n  //     this.setState({ loading: false })\n  //   })\n  //   this.setState({ requestMetamask: true })\n\n  //   }\n  //   else if(this.state.Validataion == false){\n\n  //     alert('Unique Hash is already taken. Try another')\n\n\n  //   }\n  //     else if(resualt == false){\n\n  //     alert('Json Value is invalid')\n\n\n  //   }\n\n  //    if (this.state.requestMetamask === true) {\n  //           window.location.href = \"/LedgerPrototypedApp\"\n  //       }\n\n   \n  // }\n\n\n\n\n\n\n   createData(jsonvalue, componentname,packagename,description,version,trustscore) {\n    this.setState({ loading: true })\n    this.state.adddata.methods.createData(jsonvalue, componentname,packagename,description,version,trustscore).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n\n  IsValidJSONString(item) {\n     item = typeof item !== \"string\"\n        ? JSON.stringify(item)\n        : item;\n\n    try {\n        item = JSON.parse(item);\n    } catch (e) {\n        return false;\n    }\n\n    if (typeof item === \"object\" && item !== null) {\n        return true;\n    }\n\n    return false;\n}\n\n  // componentDidMount() {\n  //   fetch(\"http://localhost:5000/allComponents\")\n  //     .then(res => res.json())\n  //     .then(\n  //       (result) => {\n  //         this.setState({\n  //           isLoaded: true,\n  //           items: result.items\n  //         });\n  //       },\n  //       // Note: it's important to handle errors here\n  //       // instead of a catch() block so that we don't swallow\n  //       // exceptions from actual bugs in components.\n  //       (error) => {\n  //         this.setState({\n  //           isLoaded: true,\n  //           error\n  //         });\n  //       }\n  //     )\n  // }\n\n\n   serialize(){\n    var formData ='{\"TrustScore\" :'+'\"'+this.trustscore.value+'\"'+', \"PackageName\" :'+'\"'+ this.packagename.value+'\"'+', \"ComponetName\" :'+'\"'+ this.componentname.value+'\"'+', \"Version\" :'+'\"'+this.version.value+'\"'+', \"Description\" :'+'\"'+this.description.value+'\"'+'}';\n    //alert(formData)\n    return(formData)\n   }\n\n\n   async validate(){\n\n    this.setState({ checking: true })\n    this.setState({ btnStatus: true })\n\n    var identity = this.identity.value;\n\n   \n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    const myaccount=accounts[0]\n    this.setState({ account:  myaccount })\n    const networkId = await web3.eth.net.getId()\n    const networkData = AddData.networks[networkId]\n    if(networkData) {\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\n      this.setState({ adddata })\n      const dataCount = await adddata.methods.dataCount().call()\n      this.setState({ dataCount })\n      //Load datas\n       this.setState({ Validataion: true })\n      this.setState({datas: []});\n      for (var i = 1; i <= dataCount; i++) {\n        const data = await adddata.methods.datas(i).call()\n\n        \n        if (data.identity==identity) {\n           this.setState({ Validataion: false })\n\n           alert('Unique Hash is already taken. Try another')\n           break\n          \n        }\n                \n      }\n\n      if (this.state.Validataion==true) {\n\n         this.setState({ btnStatus: false })\n\n      }\n\n      \n\n      this.setState({ checking: false })\n      \n\n      this.setState({ loading: false})\n    } \n    else {\n      window.alert('The contract not deployed to detected network.')\n    }\n  \n  \n}\n\n  render() {\n\n    const { items } = this.state;\n\n    return (\n\n   \n       \n\n\n      <div id=\"content\">\n\n\n         <ul>\n          {items.map(item => (\n            <li key={item.id}>\n              {item.name} {item.price}\n            </li>\n          ))}\n        </ul>\n        \n      <h3 className=\"title center\">Vote</h3>\n        <form id=\"#myForm\" onSubmit={(event) => {\n          event.preventDefault()\n          const jsonvalue = this.serialize()\n          const componentname = this.componentname.value\n          const packagename = this.packagename.value\n          const description = this.description.value\n          const version = this.version.value\n          const trustscore = this.trustscore.value\n          this.createData(jsonvalue, componentname,packagename,description,version,trustscore)\n          \n        }}>\n            <div className=\"form-group form\">\n            <input\n              id=\"trustscore\"\n              type=\"text\"\n              ref={(input) => { this.trustscore = input }}\n              className=\"form-control\"\n              placeholder=\"Trust Score\"\n             \n              required />\n          </div>\n\n\n           { this.state.checking\n                ? <div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\n                : null\n              }\n\n\n\n          <div className=\"form-group form\">\n            <input \n              id=\"componentname\"\n              type=\"text\"\n              ref={(input) => { this.componentname = input }}\n              className=\"form-control\"\n              placeholder=\"Component Name\"\n              required />\n          </div>\n\n\n\n          <div className=\"form-group form\">\n            <input \n              id=\"packagename\"\n              type=\"text\"\n              ref={(input) => { this.packagename = input }}\n              className=\"form-control\"\n              placeholder=\"Package Name\"\n              required />\n          </div>\n\n\n           <div className=\"form-group form\">\n            <input \n              id=\"description\"\n              type=\"text\"\n              ref={(input) => { this.description = input }}\n              className=\"form-control\"\n              placeholder=\"description\"\n              required />\n          </div>\n\n\n          <div className=\"form-group form\">\n            <input \n              id=\"version\"\n              type=\"text\"\n              ref={(input) => { this.version = input }}\n              className=\"form-control\"\n              placeholder=\"Version\"\n              required />\n          </div>\n\n\n\n\n          <button type=\"submit\" className=\"btn btn-info form\">Vote</button>\n        </form>\n\n        \n\n\n       \n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport Web3 from 'web3'\n\nimport './App.css';\nimport AddData from '../abis/AddData.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport mylogo from '../mylogo.jpg';\nimport uulogo from '../uulogo.png';\n\nclass App extends Component {\n\n  async componentWillMount() {\n   if (window.web3 || window.ethereum) {\n       await this.loadWeb3()\n       await this.loadBlockchainData()\n    }\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      //window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n      \n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    const myaccount=accounts[0]\n    this.setState({ account:  myaccount })\n    const networkId = await web3.eth.net.getId()\n    const networkData = AddData.networks[networkId]\n    if(networkData) {\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\n      this.setState({ adddata })\n      const dataCount = await adddata.methods.dataCount().call()\n      this.setState({ dataCount })\n      // Load datas\n      for (var i = 1; i <= dataCount; i++) {\n        const data = await adddata.methods.datas(i).call()\n        this.setState({\n          datas: [...this.state.datas, data]\n        })\n      }\n      this.setState({ loading: false})\n    } else {\n      window.alert('The contract not deployed to detected network.')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      dataCount: 0,\n      datas: [],\n      loading: true\n    }\n\n    this.createData = this.createData.bind(this)\n   \n  }\n\n  createData(jsonvalue, identity) {\n    this.setState({ loading: true })\n    this.state.adddata.methods.createData(jsonvalue, identity).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex\">\n              <Main\n                 \n                  createData={this.createData}\n                   />\n             \n            </main>\n          </div>\n        </div>\n         <div class=\"footer fixed\">\n      <img src={mylogo} alt=\"\" width=\"200\" height=\"61\"/>\n      <img src={uulogo} alt=\"\" width=\"200\" height=\"104\"/>\n     </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\n\n\n\nclass Main2 extends Component {\n  render() {\n       return (\n        <div id=\"content\">\n            <div className=\"form searchBox\">\n            <p>json file:</p>\n          { this.props.datas.map((data, key) => {\n              return(\n                <span key={key}>\n                   <p id=\"txtResult\" className=\"resualt\">{data.jsonvalue}</p>                                       \n                </span>\n              )\n            })}\n     </div>\n          </div>\n        );\n  }\n}\n\n\nexport default Main2;\n","import React, { Component } from 'react';\r\nimport Web3 from 'web3'\r\n\r\nimport './App.css';\r\nimport AddData from '../abis/AddData.json';\r\nimport Navbar from './Navbar';\r\nimport Main from './Main3';\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    if (window.web3 || window.ethereum) {\r\n       await this.loadWeb3()\r\n       await this.loadBlockchainData()\r\n    }\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      //window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n      \r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    const myaccount=accounts[0]\r\n    this.setState({ account:  myaccount })\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = AddData.networks[networkId]\r\n    if(networkData) {\r\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\r\n      this.setState({ adddata })\r\n      const dataCount = await adddata.methods.dataCount().call()\r\n      this.setState({ dataCount })\r\n      // Load datas\r\n      // for (var i = 1; i <= dataCount; i++) {\r\n      //   const data = await adddata.methods.datas(i).call()\r\n      //   this.setState({\r\n      //     datas: [...this.state.datas, data]\r\n      //   })\r\n      // }\r\n      // this.setState({ loading: false})\r\n    } else {\r\n      window.alert('The contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      dataCount: 0,\r\n      datas: [],\r\n      loading: true,\r\n      searching:false\r\n    }\r\n\r\n    this.createData = this.createData.bind(this)\r\n   \r\n  }\r\n\r\n  createData(jsonvalue, identity) {\r\n    this.setState({ loading: true })\r\n    this.state.adddata.methods.createData(jsonvalue, identity).send({ from: this.state.account })\r\n    .once('receipt', (receipt) => {\r\n      this.setState({ loading: false })\r\n    })\r\n  }\r\n\r\n\r\n  async search(){\r\n\r\n    this.setState({ searching: true})\r\n\r\n    var title = this.title.value;\r\n\r\n   \r\n       const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    const myaccount=accounts[0]\r\n    this.setState({ account:  myaccount })\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = AddData.networks[networkId]\r\n    if(networkData) {\r\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\r\n      this.setState({ adddata })\r\n      const dataCount = await adddata.methods.dataCount().call()\r\n      this.setState({ dataCount })\r\n      //Load datas\r\n      this.setState({datas: []});\r\n      for (var i = 1; i <= dataCount; i++) {\r\n        const data = await adddata.methods.datas(i).call()\r\n\r\n        \r\n        if (data.identity==title) {\r\n          this.setState({\r\n          datas: [...this.state.datas, data]\r\n        })\r\n\r\n          break\r\n\r\n        }\r\n        \r\n\r\n        \r\n      }\r\n\r\n      this.setState({ searching: false})\r\n\r\n      this.setState({ loading: false})\r\n    } else {\r\n      window.alert('The contract not deployed to detected network.')\r\n    }\r\n  \r\n  \r\n}\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account} />\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n          <div className=\"form searchBox\">\r\n            <input type=\"text\" placeholder=\"Search Unique Hash.... \" className=\"form-control\" id=\"txtSearch\" ref={input => this.title = input}/>\r\n       <button className=\"btn btn-info form btnSearch\" onClick={()=>this.search()}>\r\n      Search\r\n    </button>\r\n       { this.state.searching\r\n                ? <div id=\"loader\" className=\"text-center\"><p className=\"text-center\">Loading...</p></div>\r\n                : null\r\n              }\r\n      </div>\r\n            <main role=\"main\" className=\"col-lg-12 d-flex\">\r\n              { this.state.loading\r\n                ? <div id=\"loader\" className=\"text-center\"></div>\r\n                : <Main\r\n                  datas={this.state.datas}\r\n                                    />\r\n              }\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Web3 from 'web3';\nimport { Component } from 'react';\nimport AddData from './abis/AddData.json';\nimport Navbar from './components/Navbar';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\nimport List from './components/List';\nimport Search from './components/Search';\nimport Add from './components/Add';\nimport SearchEntities from './components/SearchEntities';\n\nclass App extends Component {\n\n  async componentWillMount() {\n\n    if (window.web3 || window.ethereum) {\n       await this.loadWeb3()\n       await this.loadBlockchainData()\n    }\n    \n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n     // window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    const myaccount=accounts[0]\n    this.setState({ account:  myaccount })\n    const networkId = await web3.eth.net.getId()\n    const networkData = AddData.networks[networkId]\n    if(networkData) {\n      const adddata = web3.eth.Contract(AddData.abi, networkData.address)\n      this.setState({ adddata })\n      const dataCount = await adddata.methods.dataCount().call()\n      this.setState({ dataCount })\n      // Load datas\n      for (var i = 1; i <= dataCount; i++) {\n        const data = await adddata.methods.datas(i).call()\n        this.setState({\n          datas: [...this.state.datas, data]\n        })\n      }\n      this.setState({ loading: false})\n    } else {\n      window.alert('The contract not deployed to detected network.')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      dataCount: 0,\n      datas: [],\n      loading: true\n     \n    }\n\n    this.createData = this.createData.bind(this)\n\n     \n   \n  }\n\n  createData(jsonvalue, identity) {\n    this.setState({ loading: true })\n    this.state.adddata.methods.createData(jsonvalue, identity).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n\n\n\nrender() {\n  return (\n     <div>\n       \n        <BrowserRouter>\n        <div>\n           <Navbar account={this.state.account}/>\n             <Switch>\n          <Route path='/Votingsystem/homepage' component={Home} />\n         \n          <Route exact path='/Votingsystem' component={Home} />\n\n\n          <Route exact path=\"/List\" component={List}/>\n             <Route exact path=\"/Search\" component={Search}/>\n              <Route exact path=\"/Add\" component={Add}/>\n               <Route exact path=\"/SearchEntities\" component={SearchEntities}/>\n         \n        </Switch>\n        </div> \n      </BrowserRouter>\n      </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter as Router} from 'react-router-dom';\n\n\n\nReactDOM.render(\n\n<Router>\n   <App />\n</Router>\n\n\t\n\n     , document.getElementById('root'));\n\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}